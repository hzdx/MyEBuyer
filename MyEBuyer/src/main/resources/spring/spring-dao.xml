<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/data/jpa 
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- 如果没有配置spring版本号，取的就是当前jar里的XSD文件，减少了各种风险。而且这样约定大于配置的方式很优雅。 -->

	<context:component-scan base-package="com.mycom" />
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 定义实体管理器工厂 Jpa配置 LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<!-- 指定Entity实体类包路径 -->
		<property name="packagesToScan">
			<array>
				<value>com.mycom.domain</value>
			</array>
		</property>
		<!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop> -->
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<!-- 重要配置：启用扫描并自动创建代理的功能 -->
	<jpa:repositories base-package="com.mycom.dao"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- Hibernate对Jpa的实现 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

	<!-- Jpa 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<!-- <property name="initialSize" value="${db.initialSize}" /> -->
		<!-- <property name="minIdle" value="${db.minIdle}" /> -->
		<!-- <property name="maxActive" value="${db.maxActive}" /> -->
		<!-- 配置获取连接等待超时的时间 -->
		<!-- <property name="maxWait" value="${db.maxWait}" /> -->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" 
			/> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" 
			/> -->

		<!-- <property name="validationQuery" value="SELECT 'x' from dual" /> -->
		<!-- <property name="testWhileIdle" value="true" /> -->
		<!-- <property name="testOnBorrow" value="false" /> -->
		<!-- <property name="testOnReturn" value="false" /> -->
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- <property name="poolPreparedStatements" value="${db.poolPreparedStatements}" 
			/> -->
		<!-- <property name="maxPoolPreparedStatementPerConnectionSize" -->
		<!-- value="${db.maxPoolPreparedStatementPerConnectionSize}" /> -->
	</bean>

</beans>